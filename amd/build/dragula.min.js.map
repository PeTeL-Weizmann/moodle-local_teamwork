{"version":3,"file":"dragula.min.js","sources":["../src/dragula.js"],"sourcesContent":["define([\n    'core/str',\n    'core/ajax',\n    'local_teamwork/render',\n    'local_teamwork/popup',\n    'local_teamwork/loading',\n    'local_teamwork/dragulasource',\n    'core/modal_factory',\n    'core/modal_events',\n    'core/notification',\n], function (Str, Ajax, render, popup, loadingIcon, dragula, ModalFactory, ModalEvents, Notification) {\n    'use strict';\n\n    const renderPageAfterDrag = (el, removeteam, callback) => {\n\n        const allTeamsBlocks = Array.from(document.querySelectorAll('div[data-team_id]'));\n        const allTeams = [];\n        const draguserid = el.dataset.student_id;\n\n        let teamid;\n        allTeamsBlocks.forEach((item) => {\n            let team = {};\n            team.teamid = item.dataset.team_id;\n            team.studentid = [];\n\n            let allStudents = Array.from(item.querySelectorAll('.teamwork_student'));\n            allStudents.forEach((student) => {\n                team.studentid.push(student.dataset.student_id);\n            });\n            allTeams.push(team);\n        });\n\n        loadingIcon.show();\n        Ajax.call([{\n            methodname: 'local_teamwork_drag_student_card',\n            args: {\n                courseid: Number(render.data.courseid),\n                activityid: Number(render.data.activityid),\n                moduletype: render.data.moduletype,\n                selectgroupid: render.data.selectgroupid,\n                newteamspost: JSON.stringify(allTeams),\n                draguserid: Number(draguserid),\n                removeteam: removeteam,\n            },\n            done: function (data) {\n                loadingIcon.remove();\n                callback(data);\n            },\n            fail: function () {\n                loadingIcon.remove();\n                popup.error();\n            }\n        }]);\n    };\n\n    const checkOverflowAndRender = (el, target, source) => {\n\n        let maxCount = source.dataset.max_count;\n\n        if (target.childElementCount === maxCount) {\n            target.classList.add('stop-drag');\n        }\n        if (source.childElementCount < maxCount) {\n            source.classList.remove('stop-drag');\n        }\n\n        if($(target).hasClass('teamwork_students')){\n            let item = $(source).parent().find('.teamwork_team-inner');\n\n            if(item.find('.teamwork_student').length === 0){\n                Str.get_strings([\n                    { key: 'titlepopupremoveteam', component: 'local_teamwork' },\n                    { key: 'contentpopupremoveteam', component: 'local_teamwork' },\n                    { key: 'buttonpopupremoveteam', component: 'local_teamwork' },\n                ]).done(function (strings) {\n\n                    var modalPromise = ModalFactory.create({\n                        type: ModalFactory.types.SAVE_CANCEL,\n                        title: strings[0],\n                        body: strings[1]\n                    });\n\n                    $.when(modalPromise).then(function (fmodal) {\n\n                        fmodal.setSaveButtonText(strings[2]);\n\n                        // Handle save event.\n                        fmodal.getRoot().on(ModalEvents.save, function (e) {\n                            e.preventDefault();\n\n                            renderPageAfterDrag(el, true, function () {\n                                render.setDefaultData();\n                                render.studentList();\n                                render.teamsCard();\n                            });\n\n                            fmodal.destroy();\n                        });\n\n                        fmodal.getRoot().on(ModalEvents.hidden, function () {\n\n                            renderPageAfterDrag(el, false, function () {\n                                render.setDefaultData();\n                                render.studentList();\n                                render.teamsCard();\n                            });\n\n                            fmodal.destroy();\n                        });\n\n                        return fmodal;\n                    }).done(function (modal) {\n                        modal.show();\n                    }).fail(Notification.exception);\n                })\n            }\n        }else{\n            renderPageAfterDrag(el, false, function () {\n                render.setDefaultData();\n                render.studentList();\n                render.teamsCard();\n            });\n        }\n    };\n\n    const drag = {\n        startDrag: function () {\n            dragula({\n                isContainer: function (el) {\n                    return el.classList.contains('draggable');\n                },\n                accepts: function (el, target) {\n                    if (!target.classList.contains('stop-drag')) {\n                        return target;\n                    }\n\n                },\n                invalid: function (el, handle) {\n                    if (el.classList.contains('stop-drag-item')) {\n                        return true;\n                    }\n                }\n            }).on('drop', checkOverflowAndRender)\n        }\n    };\n\n    return drag;\n});\n"],"names":["define","Str","Ajax","render","popup","loadingIcon","dragula","ModalFactory","ModalEvents","Notification","renderPageAfterDrag","el","removeteam","callback","allTeamsBlocks","Array","from","document","querySelectorAll","allTeams","draguserid","dataset","student_id","forEach","item","team","teamid","team_id","studentid","student","push","show","call","methodname","args","courseid","Number","data","activityid","moduletype","selectgroupid","newteamspost","JSON","stringify","done","remove","fail","error","checkOverflowAndRender","target","source","maxCount","max_count","childElementCount","classList","add","$","hasClass","parent","find","length","get_strings","key","component","strings","modalPromise","create","type","types","SAVE_CANCEL","title","body","when","then","fmodal","setSaveButtonText","getRoot","on","save","e","preventDefault","setDefaultData","studentList","teamsCard","destroy","hidden","modal","exception","startDrag","isContainer","contains","accepts","invalid","handle"],"mappings":"AAAAA,gCAAO,CACH,WACA,YACA,wBACA,uBACA,yBACA,+BACA,qBACA,oBACA,sBACD,SAAUC,IAAKC,KAAMC,OAAQC,MAAOC,YAAaC,QAASC,aAAcC,YAAaC,kBAG9EC,oBAAsB,SAACC,GAAIC,WAAYC,cAEnCC,eAAiBC,MAAMC,KAAKC,SAASC,iBAAiB,sBACtDC,SAAW,GACXC,WAAaT,GAAGU,QAAQC,WAG9BR,eAAeS,SAAQ,SAACC,UAChBC,KAAO,GACXA,KAAKC,OAASF,KAAKH,QAAQM,QAC3BF,KAAKG,UAAY,GAECb,MAAMC,KAAKQ,KAAKN,iBAAiB,sBACvCK,SAAQ,SAACM,SACjBJ,KAAKG,UAAUE,KAAKD,QAAQR,QAAQC,eAExCH,SAASW,KAAKL,SAGlBpB,YAAY0B,OACZ7B,KAAK8B,KAAK,CAAC,CACPC,WAAY,mCACZC,KAAM,CACFC,SAAUC,OAAOjC,OAAOkC,KAAKF,UAC7BG,WAAYF,OAAOjC,OAAOkC,KAAKC,YAC/BC,WAAYpC,OAAOkC,KAAKE,WACxBC,cAAerC,OAAOkC,KAAKG,cAC3BC,aAAcC,KAAKC,UAAUxB,UAC7BC,WAAYgB,OAAOhB,YACnBR,WAAYA,YAEhBgC,KAAM,SAAUP,MACZhC,YAAYwC,SACZhC,SAASwB,OAEbS,KAAM,WACFzC,YAAYwC,SACZzC,MAAM2C,aAKZC,uBAAyB,SAACrC,GAAIsC,OAAQC,YAEpCC,SAAWD,OAAO7B,QAAQ+B,WAE1BH,OAAOI,oBAAsBF,UAC7BF,OAAOK,UAAUC,IAAI,aAErBL,OAAOG,kBAAoBF,UAC3BD,OAAOI,UAAUT,OAAO,aAGzBW,EAAEP,QAAQQ,SAAS,sBAG2B,IAFlCD,EAAEN,QAAQQ,SAASC,KAAK,wBAE3BA,KAAK,qBAAqBC,QAC9B3D,IAAI4D,YAAY,CACZ,CAAEC,IAAK,uBAAwBC,UAAW,kBAC1C,CAAED,IAAK,yBAA0BC,UAAW,kBAC5C,CAAED,IAAK,wBAAyBC,UAAW,oBAC5CnB,MAAK,SAAUoB,aAEVC,aAAe1D,aAAa2D,OAAO,CACnCC,KAAM5D,aAAa6D,MAAMC,YACzBC,MAAON,QAAQ,GACfO,KAAMP,QAAQ,KAGlBR,EAAEgB,KAAKP,cAAcQ,MAAK,SAAUC,eAEhCA,OAAOC,kBAAkBX,QAAQ,IAGjCU,OAAOE,UAAUC,GAAGrE,YAAYsE,MAAM,SAAUC,GAC5CA,EAAEC,iBAEFtE,oBAAoBC,IAAI,GAAM,WAC1BR,OAAO8E,iBACP9E,OAAO+E,cACP/E,OAAOgF,eAGXT,OAAOU,aAGXV,OAAOE,UAAUC,GAAGrE,YAAY6E,QAAQ,WAEpC3E,oBAAoBC,IAAI,GAAO,WAC3BR,OAAO8E,iBACP9E,OAAO+E,cACP/E,OAAOgF,eAGXT,OAAOU,aAGJV,UACR9B,MAAK,SAAU0C,OACdA,MAAMvD,UACPe,KAAKrC,aAAa8E,cAI7B7E,oBAAoBC,IAAI,GAAO,WAC3BR,OAAO8E,iBACP9E,OAAO+E,cACP/E,OAAOgF,sBAKN,CACTK,UAAW,WACPlF,QAAQ,CACJmF,YAAa,SAAU9E,WACZA,GAAG2C,UAAUoC,SAAS,cAEjCC,QAAS,SAAUhF,GAAIsC,YACdA,OAAOK,UAAUoC,SAAS,oBACpBzC,QAIf2C,QAAS,SAAUjF,GAAIkF,WACflF,GAAG2C,UAAUoC,SAAS,yBACf,KAGhBb,GAAG,OAAQ7B,yBAKzB"}